package "nova/exception"

import "signal.h"
import "NovaExceptionHandling.h"

class ExceptionData {
    external type buffer
    external buffer* NULL
    
    visible buffer* buf
    
    visible ExceptionData parent
    
    visible CaughtException[] caught
    
    public Exception thrownException
    
    public construct(buffer* buf) {
        this.buf = buf
        this.caught = new CaughtException[]
    }
    
    public addCaught(Class type, Bool soft = false) {
        caught.add(new CaughtException(type, soft))
    }
    
    public getDataByException(Exception exception, Bool soft = false) -> ExceptionData {
        var data = this
        
        repeat {
            if (data.caught.any(c -> { (!soft || c.soft) && exception.class.isOfType(c.type) })) {
                return data
            } else if (data.parent == null) {
                return soft ? null : data
            }
            
            data = data.parent
        }
    }
    
    public jumpToBuffer(Exception exception, Bool soft = false) {
        var data = getDataByException(exception, soft)
        
        external c {
            jump(*#{data.buf}, (intptr_t)#{exception});
        }
    }
}