package "nova/primitive/number"

import "nova/datastruct/Comparable"
import "nova/operators/EqualsOperator"
import "nova/operators/MultiplyOperator"
import "nova/operators/MultiplyEqualsOperator"

class Int extends Number implements Integer {
    external int atoi(char str[])
    
    public Long hashCodeLong => value
    
    visible static final Int MAX_VALUE =  2147483647
    visible static final Int MIN_VALUE = -2147483648
    
    public Double realValue => (Double)value
    public Long integerValue => value
    
    public construct(public Int value) {}
    
    public compareTo(Number other) => other.compareToInteger(value)
    public compareToReal(Double other) => this.value - other
    public compareToInteger(Long other) => this.value - other
    
    public plus(Number other) => other.plusInteger(value)
    public plusReal(Double other) => this.value + other
    public plusInteger(Long other) => this.value + other
    
    public plusEquals(Number other) => other.plusEqualsInteger(value)
    public plusEqualsReal(Double other) => this.value += other
    public plusEqualsInteger(Long other) => this.value += other
    
    public minus(Number other) => other.minusInteger(value)
    public minusReal(Double other) => this.value - other
    public minusInteger(Long other) => this.value - other
    
    public minusEquals(Number other) => other.minusEqualsInteger(value)
    public minusEqualsReal(Double other) => this.value -= other
    public minusEqualsInteger(Long other) => this.value -= other
    
    public multiply(Number other) => other.multiplyInteger(value)
    public multiplyReal(Double other) => this.value * other
    public multiplyInteger(Long other) => this.value * other
    
    public multiplyEquals(Number other) => other.multiplyEqualsInteger(value)
    public multiplyEqualsReal(Double other) => this.value *= other
    public multiplyEqualsInteger(Long other) => this.value *= other
    
    public equals(Number other) => other.equalsInteger(value)
    public equalsReal(Double other) => this.value == other
    public equalsInteger(Long other) => this.value == other
    
    public toString() => toString(value)
    
    public static numDigits(Int number) => Long.numDigits(number)
    public static toString(Int value) => Long.toString(value)
    public static parseInt(String num) => atoi(num.chars.data)
}