package "nova/primitive/number"

import "nova/datastruct/Comparable"
import "nova/operators/EqualsOperator"
import "nova/operators/MultiplyOperator"
import "nova/operators/MultiplyEqualsOperator"

immutable class Int extends Number implements Comparable<Int>, Integer, MultiplyOperator<Int, Int>, MultiplyEqualsOperator<Int, Int>, EqualsOperator<Int> {
    external int atoi(char str[])
    
    public Long hashCodeLong => value
    
    visible static final Int MAX_VALUE =  2147483647
    visible static final Int MIN_VALUE = -2147483648
    
    public construct(private Int value) {}
    
    public compareTo(Int other) => value - other
    public multiply(Int value) => this.value * value
    public multiplyEquals(Int value) => this.value *= value
    public equals(Int value) => this.value == value
    public toString() => toString(value)
    
    public static numDigits(Int number) => Long.numDigits(number)
    public static toString(Int value) => Long.toString(value)
    public static parseInt(String num) => atoi(num.chars.data)
}