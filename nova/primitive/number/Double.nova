package "nova/primitive/number"

import "nova/datastruct/Comparable"

immutable class Double extends Number implements Comparable<Double>, RealNumber {
    external void sprintf(char buffer[], char format[], double value)
    external char[] realloc(char buffer[], int size)
    external int strlen(char buffer[])
    external double strtod(char str[], char* pEnd[])
    
    Double value
    
    construct(Double value) => this.value = value
    
    public static numDigits(Double number) -> Int {
        Int size = number < 0 ? 2 : 1
        
        number /= 10
        
        while (number > 0) {
            number /= 10
            
            size++
        }
        
        return size
    }
    
    static genString(native Char buffer[], Int lastIndex) -> String {
        buffer = realloc(buffer, ++lastIndex + 1)
        
        buffer[lastIndex] = '\0'
        
        return new String(buffer)
    }
    
    static native genBuffer(Double value) -> Char[] {
        Int  size     = 11 + 1 + 15
        
        native Char[] buffer = new Char[size]
        
        sprintf(buffer, "%.15f", value)
        
        return buffer
    }
    
    static repetition(native Char[] buffer, Int start) -> Int {
        Int  index = start
        Char c     = buffer[index]
        
        while (buffer[--index] == c);
        
        return start - index - 1
    }
    
    static lastSignificantDigit(native Char[] buffer, Int start) -> Int {
        while (buffer[start--] == '0');
        
        return start + 1
    }
    
    public native static toCharArray(Double value) -> Char[] {
        external js {
            return #{value}.toString();
        }
    }
    
    [Target js]
    public static toString(Double value) => new String(toCharArray(value))
    
    [Target not js]
    public static toString(Double value) -> String {
        native Char buffer[]  = genBuffer(value)
        Int  size      = strlen(buffer)
        Int  lastIndex = size - 1
        
        Char c = buffer[--lastIndex]
        
        if (c == '0' || c == '9') {
            while (buffer[lastIndex--] == c);
            
            if (buffer[++lastIndex] == '.') {
                lastIndex++
                
                return genString(buffer, lastIndex)
            } else {
                if (lastIndex >= size - 3 - 4) {
                    lastIndex = size - 1
                } else if (c == '9') {
                    buffer[lastIndex]++
                    
                    return genString(buffer, lastIndex)
                }
            }
        } else {
            Int rep = repetition(buffer, lastIndex)
            
            if (rep > 5) {
                buffer[lastIndex] = c
                
                if (c >= '5') {
                    c++;
                }
                
                buffer[++lastIndex] = c
                
                return genString(buffer, lastIndex)
            }
        }
        
        lastIndex = lastSignificantDigit(buffer, size - 1)
        
        return genString(buffer, lastIndex)
    }
    
    public static parseDouble(String str) -> Double {
        native Char[] pEnd
        
        return strtod(str.charData.data, pEnd)
    }
    
    public compareTo(Double other) => value - other
    public multiply(Double value) => this.value * value
    public toString() => toString(value)
}