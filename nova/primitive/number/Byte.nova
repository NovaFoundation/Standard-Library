package "nova/primitive/number"

import "nova/datastruct/Comparable"
import "nova/operators/EqualsOperator"
import "nova/operators/MultiplyOperator"
import "nova/operators/MultiplyEqualsOperator"

class Byte extends Number implements Integer {
    public construct(public Byte value)
    
    public compareTo(Number other) => other.compareToInteger(value)
    public compareToReal(Double other) => this.value - other
    public compareToInteger(Long other) => this.value - other
    
    public multiply(Number other) => other.multiplyInteger(value)
    public multiplyReal(Double other) => this.value * other
    public multiplyInteger(Long other) => this.value * other
    
    public multiplyEquals(Number other) => other.multiplyEqualsInteger(value)
    public multiplyEqualsReal(Double other) => this.value *= other
    public multiplyEqualsInteger(Long other) => this.value *= other
    
    public equals(Number other) => other.equalsInteger(value)
    public equalsReal(Double other) => this.value == other
    public equalsInteger(Long other) => this.value == other
    
    public toString() => toString(value)
    
    public static numDigits(Byte number) => Long.numDigits(number)
    public static toString(Byte value) => Long.toString(value)
}