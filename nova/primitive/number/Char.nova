package "nova/primitive/number"

import "nova/datastruct/Comparable"
import "nova/operators/EqualsOperator"
import "nova/operators/MultiplyOperator"
import "nova/operators/MultiplyEqualsOperator"

class Char extends Number implements Comparable<Char>, Integer {
    public construct(public Char value) {}
    
    public static toLowerCase(Char c) -> Char => c {
        Int id = (Int)c
        
        if (id >= 65 && id <= 90) {
            return (Char)(id + 32)
        }
    }
    
    public static toUpperCase(Char c) -> Char => c {
        Int id = (Int)c
        
        if (id >= 97 && id <= 122) {
            return (Char)(id - 32)
        }
    }
    
    public toLowerCase() => toLowerCase(value)
    public toUpperCase() => toUpperCase(value)
    
    public compareTo(Number other) => other.compareToInteger(value)
    public compareToReal(Double other) => this.value - other
    public compareToInteger(Long other) => this.value - other
    
    public multiply(Number other) => other.multiplyInteger(value)
    public multiplyReal(Double other) => this.value * other
    public multiplyInteger(Long other) => this.value * other
    
    public multiplyEquals(Number other) => other.multiplyEqualsInteger(value)
    public multiplyEqualsReal(Double other) => this.value *= other
    public multiplyEqualsInteger(Long other) => this.value *= other
    
    public equals(Number other) => other.equalsInteger(value)
    public equalsReal(Double other) => this.value == other
    public equalsInteger(Long other) => this.value == other
    
    public toString() => toString(value)
    
    public static toString(Char c) => new String(c)
}