package "nova/math/logic"

import "nova/datastruct/Bounds"

class WFF {
    Hypothesis[]      hypotheses
    
    Conclusion        conclusion
    
    static Char[]     whitespace = [ ' ', '\t', '\n', '\r' ]
    
    public construct(private String wff, private StatementLetter[] letters) {
        wff = wff.trim()
        
        hypotheses = new Array()
        
        decodeFormula()
    }
    
    decodeFormula() {
        StatementGroup<Conclusion> conclusionGroup = searchForConclusion(wff)
        
        if (!conclusionGroup) {
            throw new InvalidFormulaException("No valid conclusion found")
        }
        
        Conclusion conclusion = conclusionGroup.statement
        
        Console.writeLine("Conclusion: " + conclusion)
        
        wff = conclusionGroup.bounds.extractPreString(wff)
        
        StatementGroup<Hypothesis>[] statements = decodeHypotheses(wff)
        
        for (i in 0..statements.count) {
            StatementGroup<Hypothesis> group = statements.get(i)
            
            hypotheses.add(group.statement)
        }
        for (n in 0..hypotheses.count) {
            Console.writeLine(hypotheses.get(n))
        }
    }
    
    searchForConclusion(String wff) -> StatementGroup<Conclusion> {
        Int index = wff.lastIndexOf("->")
        
        if (index < 0) {
            return null
        }
        
        if (wff.chars.last == ')') {
            Int first = findEndingMatch(wff, '(', ')', wff.count - 1, -1)
            
            
        }
        
        let conclusionStart = nextNonWhitespaceIndex(wff, index + 2, 1)
        let bounds = new Bounds(conclusionStart, wff.count)
        let conclusion = new Conclusion(bounds.extractString(wff))
        
        bounds.start = nextNonWhitespaceIndex(wff, index - 1, -1) + 1
        
        return new StatementGroup<Conclusion>(conclusion, bounds)
    }
    
    decodeHypotheses(String wff) -> StatementGroup<Hypothesis>[] {
        let list = new StatementGroup<Hypothesis>[]
        
        Int next = 0
        Int prev = 0
        
        var index = wff.indexOf("&")
        
        while (index >= 0) {
            next = nextNonWhitespaceIndex(wff, index - 1, -1)
            //next = nextWhitespaceIndex(wff, next + 1, 1)
            
            list.add(generateHypothesis(wff, prev, next + 1))
            
            prev = nextNonWhitespaceIndex(wff, index + 1, 1)
            
            index = wff.indexOf("&", prev + 1)
        }
        
        list.add(generateHypothesis(wff, prev, wff.count))
        
        return list
    }
    
    generateHypothesis(String wff, Int start, Int end) -> StatementGroup<Hypothesis> {
        let bounds = new Bounds(start, end)
        let h = new Hypothesis(bounds.extractString(wff))
        
        return new StatementGroup<Hypothesis>(h, bounds)
    }
    
    searchForStatement(String wff) -> StatementGroup<Statement> => null {}
    
    static nextNonWhitespaceIndex(String wff, Int index, Int direction) =>
        nextWhitespaceIndex(wff, index, direction, true)
    
    static nextWhitespaceIndex(String wff, Int index, Int direction) =>
        nextWhitespaceIndex(wff, index, direction, false)
    
    static nextWhitespaceIndex(String wff, Int index, Int direction, Bool opposite, Int defaultReturnValue = -1) -> Int => defaultReturnValue {
        var i = index
        
        while (i < wff.count && i >= 0) {
            Char c = wff.chars[i]
            
            if (whitespace.contains(c) != opposite) {
                return i
            }
            
            i += direction
        }
    }
    
    static containsChar(Char needle, Char[] chars) -> Bool => false {
        for (i in 0..chars.count) {
            if (needle == chars.data[i]) {
                return true
            }
        }
    }
    
    static findEndingMatch(String wff, Char start, Char end, Int index, Int direction, Int defaultReturnValue = -1) -> Int => defaultReturnValue {
        if (direction < 0) {
            let temp = start
            start = end
            end = temp
        }
        
        Int scope = 0
        
        Int i = index
        
        while (i < wff.count && i >= 0) {
            Char c = wff.chars[i]
            
            match (c)
                start => scope++
                end => scope--
            
            if (scope == 0) {
                return i
            }
            
            i += direction
        }
    }
}