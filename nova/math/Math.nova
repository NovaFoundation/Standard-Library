package "nova/math"

import "math.h"

public class Math
{
	[Target c] external double llabs(long number) as extAbs
	[Target c] external double fabs(double number) as extFabs
	[Target c] external double sqrt(double number) as extSqrt
	[Target c] external double pow(double base, double power) as extPow
	[Target c] external double sin(double number) as extSin
	[Target c] external double cos(double number) as extCos
	[Target c] external double tan(double number) as extTan
	[Target c] external double asin(double number) as extAsin
	[Target c] external double acos(double number) as extAcos
	[Target c] external double atan(double number) as extAtan
	[Target c] external long floor(double number) as extFloor
	[Target c] external long ceil(double number) as extCeil
	
	[Target js] external double Math.abs(long number) as extAbs
	[Target js] external double Math.abs(double number) as extFabs
	[Target js] external double Math.sqrt(double number) as extSqrt
	[Target js] external double Math.pow(double base, double power) as extPow
	[Target js] external double Math.sin(double number) as extSin
	[Target js] external double Math.cos(double number) as extCos
	[Target js] external double Math.tan(double number) as extTan
	[Target js] external double Math.asin(double number) as extAsin
	[Target js] external double Math.acos(double number) as extAcos
	[Target js] external double Math.atan(double number) as extAtan
	[Target js] external long Math.floor(double number) as extFloor
	[Target js] external long Math.ceil(double number) as extCeil
	
	external long rand() as extRand

	visible static Double PI = 3.141592653

	public static max(Long a, Long b) -> Long
	{
	    return a > b ? a : b
	}

	public static min(Long a, Long b) -> Long
	{
	    return a < b ? a : b
	}

	public static sign(Long num) -> Byte
	{
		if (num > 0)
		{
			return 1
		}
		else if (num < 0)
		{
			return -1
		}

		return 0
	}

	public static random(Long range) -> Int
	{
		return extRand() % range
	}

	public static abs(Long number) -> Long
	{
	    return extAbs(number)
	}

	public static abs(Double number) -> Double
	{
		return extFabs(number)
	}

	public static sqrt(Double number) -> Double
	{
		return extSqrt(number)
	}

	public static pow(Double base, Double power) -> Double
	{
		return extPow(base, power)
	}

	public static sin(Double number) -> Double
	{
		return extSin(number)
	}

	public static cos(Double number) -> Double
	{
		return extCos(number)
	}

	public static tan(Double number) -> Double
	{
		return extTan(number)
	}

	public static asin(Double number) -> Double
	{
		return extAsin(number)
	}

	public static acos(Double number) -> Double
	{
		return extAcos(number)
	}

	public static atan(Double number) -> Double
	{
		return extAtan(number)
	}

	public static round(Double number) -> Long
	{
		return floor(number + 0.5)
	}

	public static floor(Double number) -> Long
	{
		return extFloor(number)
	}

	public static ceil(Double number) -> Long
	{
		return extCeil(number)
	}

	/*static pow(Int a, Int b) -> Int
	{
		if (b == 0)
		{
			return 1
		}
		else if (b > 0)
		{
			return positivePow(a, b)
		}
		else
		{
			return 0
		}
	}

	static positivePow(Int a, Int b) -> Int
	{
		for (Int i = b - 2; i >= 0; i--)
		{
			a = a * a
		}

		return a
	}*/
}
