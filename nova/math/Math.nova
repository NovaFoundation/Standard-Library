package "nova/math"

import "math.h"

[AutoFinal]
class Math {
    [Target c] external long llabs(long number) as extAbs
    [Target c] external double fabs(double number) as extFabs
    [Target c] external double sqrt(double number) as extSqrt
    [Target c] external double pow(double base, double power) as extPow
    [Target c] external double sin(double number) as extSin
    [Target c] external double cos(double number) as extCos
    [Target c] external double tan(double number) as extTan
    [Target c] external double asin(double number) as extAsin
    [Target c] external double acos(double number) as extAcos
    [Target c] external double atan(double number) as extAtan
    [Target c] external long floor(double number) as extFloor
    [Target c] external long ceil(double number) as extCeil
    
    [Target not c] external long Math.abs(long number) as extAbs
    [Target not c] external double Math.abs(double number) as extFabs
    [Target not c] external double Math.sqrt(double number) as extSqrt
    [Target not c] external double Math.pow(double base, double power) as extPow
    [Target not c] external double Math.sin(double number) as extSin
    [Target not c] external double Math.cos(double number) as extCos
    [Target not c] external double Math.tan(double number) as extTan
    [Target not c] external double Math.asin(double number) as extAsin
    [Target not c] external double Math.acos(double number) as extAcos
    [Target not c] external double Math.atan(double number) as extAtan
    [Target not c] external long Math.floor(double number) as extFloor
    [Target not c] external long Math.ceil(double number) as extCeil
    
    external long rand() as extRand

    [*] [Static] Double PI = 3.141592653

    [+] [Static] max(Long a, Long b) => a > b ? a : b
    [+] [Static] min(Long a, Long b) => a < b ? a : b
    [+] [Static] sign(Long num) => num > 0 ? 1 : (num < 0 ? -1 : 0)
    [+] [Static] random(Long range) => extRand() % range
    [+] [Static] abs(Long number) => number < 0 ? -number : number
    [+] [Static] abs(Double number) => number < 0 ? -number : number
    [+] [Static] sqrt(Double number) => extSqrt(number)
    [+] [Static] pow(Double base, Double power) => extPow(base, power)
    [+] [Static] sin(Double number) => extSin(number)
    [+] [Static] cos(Double number) => extCos(number)
    [+] [Static] tan(Double number) => extTan(number)
    [+] [Static] asin(Double number) => extAsin(number)
    [+] [Static] acos(Double number) => extAcos(number)
    [+] [Static] atan(Double number) => extAtan(number)
    [+] [Static] round(Double number) => floor(number + 0.5)
    [+] [Static] floor(Double number) => (Long)(number < 0 && (Long)number != number ? number - 1 : number)
    [+] [Static] ceil(Double number) => (Long)(number >= 0 && (Long)number != number ? number + 1 : number)

    /*[Static] pow(Int a, Int b) -> Int {
        if (b == 0) {
            return 1
        } else if (b > 0) {
            return positivePow(a, b)
        } else {
            return 0
        }
    }

    [Static] positivePow(Int a, Int b) -> Int {
        for (Int i = b - 2; i >= 0; i--) {
            a = a * a
        }

        return a
    }*/
}