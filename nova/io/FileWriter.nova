package "nova/io"

import "nova/regex/Pattern"

class FileWriter implements OutputStream {
    external type FILE
    external type thing
    
    var FILE* fp
    
    external FILE* fopen(char location[], char operation[])
    external void perror(char name[])
    external FILE* freopen(char location[], char operation[], FILE* fp)
    external void fprintf(FILE* fp, char data[])
    external int fputs(char str[], FILE* stream)
    external int fflush(FILE* fp)
    external int fclose(FILE* fp)
    external void fgets(char buffer[], int size, FILE* fp)
    external char[] realloc(char buffer[], int size)
    external char getc(FILE* fp)
    external void rewind(FILE* fp) as extRewind
    external int remove(char name[])
    
    visible File file
    
    visible Bool isOpen => fp != 0
    
    external char EOF

    [Target js] private var String buffer = ""
    
    public construct(visible File file) {
        external c {
            #{fp} = fopen((char*)#{file.location.chars.data}, "r+");
        }
    }
    
    [Target c]
    public construct(FILE* fp) {
        this.fp = fp
    }
    
    [Target java]
    public construct(thing fp) {
    }
    
    [Target js]
    public construct() {
    }
    
    public construct(String location) => this(new File(location))
    
    public delete() => close() && remove(file.location.chars.data) == 0
    
    public reopen() => fp != 0 {
        close()
        
        fp = fopen(file.location.chars.data, "r+")
    }
    
    public rewind() => extRewind(fp)
    
    public clearContents() =>
        file.exists && (fp = fopen(file.location.chars.data, "w")) != 0
    
    public create() => false {
        if (!file.exists) {
            fp = fopen(file.location.chars.data, "w")
            
            if (!file.exists) {
                throw new FileNotFoundException(file)
            }
            
            reopen()
            
            if (!file.exists) {
                throw new FileNotFoundException(file)
            }
            
            return true
        }
    }
    
    public writeLine(String line = "") => write("#line\n")

    [Target not js]
    public write(String data) => this {
        external c {
            if (fwrite(#{data.chars.data}, 1, #{data.count}, #{fp}) != EOF && #{flush()})
        }
    }

    [Target js]
    public write(String data) => this {
        let split = data.split(new Pattern("\n"))

        if (split.count > 1) {
            let dataToPrint = buffer + split.skipLast(1).join("\n")

            buffer = split.last

            external js {
                console.log(#{dataToPrint.chars.data});
            }
        } else {
            buffer += data
        }
    }
    
    [Target c] public flush() => fflush(fp) == 0
    [Target c] public close() => isOpen && fclose(fp) == 0

    [Target js] public flush() {
        if (buffer.count > 0) {
            external js {
                console.log(#{buffer.chars.data});
            }

            buffer = ""
        }
    }

    [Target js] public close() => false
}