package "nova/security"

class Sha256 {
    static Long[] CONSTANTS =
        [ 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
          0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
          0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
          0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
          0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
          0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
          0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
          0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 ]
    
    public digest(String msg) -> String {
        Long[] hash = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]
        
        // // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]
        // var l = msg.count / 4 + 2 // length (in 32-bit integers) of msg + ‘1’ + appended length
        // Long n = Math.ceil(l / 16)  // number of 16-integer-blocks required to hold 'l' ints
        // var M = new Long[n][16]
        
        // for (i in 0..n) {
        //     for (j in 0..16) { // encode 4 chars per integer, big-endian encoding
        //         M[i][j] = (msg[i * 64 + j * 4] << 24) | (msg[i * 64 + j * 4 + 1] << 16) |
        //                   (msg[i * 64 + j * 4 + 2] << 8) | (msg[i * 64 + j * 4 + 3])
        //     } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0
        // }
        
        // // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]
        // // note: most significant word would be (len-1)*8 >>> 32, but since JS converts
        // // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators
        // M[n - 1][14] = Math.floor(((msg.count - 1) * 8) / (Long)Math.pow(2, 32))
        // M[n - 1][15] = ((msg.count - 1) * 8) & 0xffffffff
        
        // // hashAShash COMPUTATION [§6.1.2]
        
        // for (i in 0..n) {
        //     var W = new Long[64]
            
        //     // 1 - prepare message schedule 'W'
        //     for (t in  0..16) W[t] = M[i][t]
        //     for (t in 16..64) W[t] = l4(W[t - 2]) + W[t - 7] + l3(W[t - 15]) + W[t - 16]
            
        //     // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value
        //     // var a = hash[0]
        //     // var b = hash[1]
        //     // var c = hash[2]
        //     // var d = hash[3]
        //     // var e = hash[4]
        //     // var f = hash[5]
        //     // var g = hash[6]
        //     // var h = hash[7]
            
        //     // // 3 - main loop (note 'addition modulo 2^32')C
        //     // for (t in 0..64) {
        //     //     var T1 = h + l2(e) + l5(e, f, g) + CONSTANTS[t] + W[t]
        //     //     var T2 =     l1(a) + l6(a, b, c)
        //     //     h = g
        //     //     g = f
        //     //     f = e
        //     //     e = d + T1
        //     //     d = c
        //     //     c = b
        //     //     b = a
        //     //     a = T1 + T2
        //     // }
            
        //     // // 4 - compute the new intermediate hash value
        //     // hash[0] += a
        //     // hash[1] += b
        //     // hash[2] += c
        //     // hash[3] += d
        //     // hash[4] += e
        //     // hash[5] += f
        //     // hash[6] += g
        //     // hash[7] += h
        // }
        
        // convert hash0..hash4 to hex strings (with leading zeros)
        //for (h in 0..hash.count) hash[h] = ('00000000' + hash[h].toString(16)).slice(-8)
        
        return hash.join("")
    }
    
    /// 
    /// Rotates right (circular right shift) value x by n positions [§3.2.4].
    /// @private
    /// 
    rotr(Long n, Long x) => (x >>> n) | (x << (32 - n))
    l1(Long x) => rotr(2,  x) ^ rotr(13, x) ^ rotr(22, x)
    l2(Long x) => rotr(6,  x) ^ rotr(11, x) ^ rotr(25, x)
    l3(Long x) => rotr(7,  x) ^ rotr(18, x) ^ (x >>> 3)
    l4(Long x) => rotr(17, x) ^ rotr(19, x) ^ (x >>> 10)
    l5(Long x, Long y, Long z) => (x & y) ^ (~x & z)
    l6(Long x, Long y, Long z) => (x & y) ^ (x & z) ^ (y & z)
}