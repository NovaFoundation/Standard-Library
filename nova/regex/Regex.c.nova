package "nova/regex"

import "pcre/pcre2.h"

class Regex {
    public static getMatches(String regex, String search) -> Match[] {
        [PrimitiveArray]
        Int[] values
        
        external {
            int crlf_is_newline;
            int errornumber;
            int rc;
            int currentSize = 0;
            int i;
            int utf8;
            
            uint32_t newline;
            uint32_t option_bits;

            PCRE2_SIZE erroroffset;
            pcre2_match_data *match_data;
            PCRE2_SIZE *ovector = 0;
            PCRE2_SIZE *matchBoundaries = 0;
            
            pcre2_code *re;
            
            char* strData = (char*)#{search.chars.data};
            
            re = pcre2_compile(
                (PCRE2_SPTR)#{regex.chars.data},               /* the pattern */
                PCRE2_ZERO_TERMINATED, /* indicates pattern is zero-terminated */
                0,                     /* default options */
                &errornumber,          /* for error number */
                &erroroffset,          /* for error offset */
                NULL);                 /* use default compile context */
            
            if (re == NULL) {
                #{
                    throw new Exception("Failed to compile regex '#regex'")
                }
                
                return #{(Array)null};
            }
            
            match_data = pcre2_match_data_create_from_pattern(re, NULL);
            
            (void)pcre2_pattern_info(re, PCRE2_INFO_ALLOPTIONS, &option_bits);
            utf8 = (option_bits & PCRE2_UTF) != 0;
            
            (void)pcre2_pattern_info(re, PCRE2_INFO_NEWLINE, &newline);
            crlf_is_newline = newline == PCRE2_NEWLINE_ANY ||
                              newline == PCRE2_NEWLINE_CRLF ||
                              newline == PCRE2_NEWLINE_ANYCRLF;
            
            for (;;) {
                uint32_t options = 0;                   /* Normally no options */
                PCRE2_SIZE start_offset = 0;
                
                if (ovector != 0) {
                    start_offset = ovector[1];
                    
                    if (ovector[0] == ovector[1]) {
                        if (ovector[0] == #{search.count}) break;
                        
                        options = PCRE2_NOTEMPTY_ATSTART | PCRE2_ANCHORED;
                    }
                }
            
                rc = pcre2_match(
                    re,                   /* the compiled pattern */
                    (PCRE2_SPTR)strData,              /* the subject string */
                    #{search.count},       /* the length of the subject */
                    start_offset,                    /* start at offset 0 in the subject */
                    options,                    /* default options */
                    match_data,           /* block for storing the result */
                    NULL);                /* use default match context */
                
                if (rc == PCRE2_ERROR_NOMATCH) {
                    if (options == 0) break;                    /* All matches found */
                    
                    ovector[1] = start_offset + 1;              /* Advance one code unit */
                    
                    if (crlf_is_newline &&                      /* If CRLF is a newline & */
                        start_offset < #{search.count} - 1 &&    /* we are at CRLF, */
                        strData[start_offset] == '\r' &&
                        strData[start_offset + 1] == '\n')
                    ovector[1] += 1;                            /* Advance by one more. */
                    else if (utf8) {                            /* Otherwise, ensure we advance a whole UTF-8 */
                        while (ovector[1] < #{search.count}) {   /* character. */
                            if ((strData[ovector[1]] & 0xc0) != 0x80) break;
                            ovector[1] += 1;
                        }
                    }
                    
                    continue;    /* Go round the loop again */
                }
                
                if (rc < 0) {
                    #{
                        throw new Exception("Matching error for regex '#regex'")
                    }
                }
                
                ovector = ovector == 0 ? pcre2_get_ovector_pointer(match_data) : ovector;
                
                if (matchBoundaries == 0) {
                    matchBoundaries = NOVA_MALLOC(sizeof(PCRE2_SIZE) * rc * 2);
                } else {
                    PCRE2_SIZE *temp = NOVA_MALLOC(sizeof(PCRE2_SIZE) * (currentSize + rc) * 2);
                    
                    arrayCopy(temp, 0, matchBoundaries, 0, currentSize * 2, (currentSize + rc) * 2, sizeof(PCRE2_SIZE));
                    
                    matchBoundaries = temp;
                }
                
                for (i = 0; i < rc; i++) {
                    matchBoundaries[(currentSize + i) * 2] = ovector[i * 2];
                    matchBoundaries[(currentSize + i) * 2 + 1] = ovector[i * 2 + 1];
                }
                
                currentSize += rc;
                
                if (rc == 0) {
                    #{
                        throw new Exception("Regex returned too many results to be stored variable")
                    }
                }
            }
            
            #{
                Int matchCount = 0
            }
            
            #{matchCount} = currentSize;
            
            #{
                var matches = new Array<Match>(matchCount)
            }
            
            #{values} = matchBoundaries;   
        }
        
        for (m in 0..matchCount) {
            matches[m] = new Match(search, values[m * 2], values[m * 2 + 1])
        }
        
        return matches
    }
}