package "nova/datastruct"

import "nova/datastruct/list/List"
import "nova/datastruct/list/ArrayIterator"

class Tuple implements List<Object> {
	public construct(visible Object[] items) {}
	
	visible ArrayIterator<Object> iterator => new ArrayIterator(items)

	public Object first <=> items.first
	public Object last <=> items.last
	
	[Override] public contains(Object value) => items.contains(value)
	[Override] public toArray() => items.toArray()
	[Override] public forEach(func(Object, Int, List<Object>)) => items.forEach(func)
	[Override] public any(anyFunc(Object) -> Bool) => items.any(anyFunc)
	[Override] public all(allFunc(Object) -> Bool, passing Bool stopOnContradiction) => items.all(allFunc, stopOnContradiction)
	[Override] public filter(filterFunc(Object, Int, Array<Object>) -> Bool) => items.filter(filterFunc)
	[Override] public take(Int howMany) => items.take(howMany)
	[Override] public skip(Int howMany) => items.skip(howMany)
	[Override] public firstWhere(func(Object) -> Bool) => items.firstWhere(func)
	[Override] public reverse() => new Tuple(items.reverse())
	[Override] public map<Out>(mapFunc(Object, Int, List<Object>) -> Out) -> List<Object> {
		return items.map(mapFunc)
	}
}