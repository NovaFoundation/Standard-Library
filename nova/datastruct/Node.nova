package "nova/datastruct"

import "nova/datastruct/list/Queue"

[AutoFinal]
class Node<E> {
    public E data
    
    visible Node<E>[] children
    
    public construct(E data = null, Int numChildren = 5) {
        children = new Array(numChildren)
        
        this.data = data
    }
    
    public preorder() => preorder(new Array<E>())
    public inorder() => inorder(new Array<E>())
    public postorder() => postorder(new Array<E>())
    public levelorder() => levelorder(new Array<E>())
    
    preorder(E[] array) => array {
        array.add(data)
        
        children.filter({ _ != null }).forEach({ _.preorder(array) })
    }
    
    inorder(E[] array) => array {
        let Int half = Math.ceil(children.count / 2.0)
        
        children.take(half).filter({ _ != null }).forEach({ _.inorder(array) })
        
        array.add(data)
        
        children.skip(half).filter({ _ != null }).forEach({ _.inorder(array) })
    }
    
    postorder(E[] array) => array {
        children.filter({ _ != null }).forEach({ _.postorder(array) })
        
        array.add(data)
    }
    
    levelorder(E[] array) => array {
        let queue = new Queue<Node<E>>([this])
        
        while (!queue.empty) {
            let current = queue.dequeue()
            
            array.add(current.data)
            
            current.children.filter({ _ != null }).forEach({ queue.enqueue(_) })
        }
    }
    
    [Override]
    public toString() => "#data"
}