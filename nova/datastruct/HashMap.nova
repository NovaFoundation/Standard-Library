package "nova/datastruct"

import "nova/datastruct/list/List"

public class HashMap<K, V> implements List<Pair<K, V>>
{
	Pair<K, V>[][] buckets
	
	Int bucketSize
	
	visible Int size
	
	public construct()
	{
	    this(5, 5)
	}
	
	public construct(Int bucketCount, Int bucketSize)
	{
		buckets = new Array(bucketCount).map({ new Array<Pair<K, V>>(bucketSize) })
		
		this.bucketSize = bucketSize
	}
	
	[Override]
	public toArray() -> Pair<K, V>[]
	{
	    return map({ _ })
	}
	
	[Override]
	public contains(Pair<K, V> value) -> Bool
	{
	    Pair<K, V> pair = getPair(value.key)
	    
	    if (pair != null)
	    {
	        return pair.value == value.value// || (pair.value != null && pair.value.equals(value.value))
	    }
	    
	    return false
	}
	
	[Override]
	public any(func(Pair<K, V>) -> Bool) -> Bool
	{
        for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    if (func(pair))
                    {
                        return true
                    }
                }
            }
        }
	    
	    return false
	}
	
	[Override]
	public all(func(Pair<K, V>) -> Bool) -> Bool
	{
        for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    if (!func(pair))
                    {
                        return false
                    }
                }
            }
        }
	    
	    return true
	}
	
	[Override]
	public map<Out>(func(Pair<K, V>, Int, HashMap<K, V>) -> Out) -> Out[]
	{
	    Out[] array = new Array()
	    
	    Int i = 0
	    
        for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    array.add(func(pair, i++, this))
                }
            }
        }

        return array
	}
	
	[Override]
	public filter(func(Pair<K, V>, Int, HashMap<K, V>) -> Bool) -> Pair<K, V>[]
	{
	    Pair<K, V>[] array = new Array()
	    
	    Int i = 0
	    
        for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    if (func(pair, i++, this))
                    {
                        array.add(pair)
                    }
                }
            }
        }

        return array
	}
	
	[Override]
	public join(String delimiter) -> String
	{
	    Int i = 0
	    
	    String output = ""
	    
	    for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    if (i > 0)
                    {
                        output = output + delimiter
                    }
                    
                    output = output + pair
                }
            }
        }

        return output
	}
	
	[Override]
	public skip(Int num) -> Pair<K, V>
	{
	    return map({ _ }).skip(num)
	}
	
	[Override]
	public take(Int num) -> Pair<K, V>
	{
	    return map({ _ }).take(num)
	}
	
	[Override]
	public reverse() -> Pair<K, V>[]
	{
	    return map({ _ }).reverse()
	}
	
	[Override]
	public firstWhere(func(Pair<K, V>) -> Bool) -> Pair<K, V>
	{
	    for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    if (func(pair))
                    {
                        return pair
                    }
                }
            }
        }
        
        return null
	}
	
	[Override]
	public forEach(func(Pair<K, V>, Int, HashMap<K, V>))
	{
	    //HashMap<K, V> self = this
	    
	    /*buckets.forEach(
	    {
	        _.forEach(pair ->
	        {
                if (pair != null && pair != 0)
                {
                    func(pair, i++, self)
                }
            })
        })*/
        
	    Int i = 0
	    
        for (bucket in buckets)
        {
            for (pair in bucket)
            {
                if (pair != null && pair != 0)
                {
                    func(pair, i++, this)
                }
            }
        }
	}
	
	getBucket(K key) -> Pair<K, V>[]
	{
	    //return buckets.get((Int)(key.hashCodeLong % buckets.count))
	    return buckets.get((Int)(key.hashCodeLong & (buckets.count - 1)))
	}
	
	public put(K key, V value) -> HashMap
	{
	    var bucket = getBucket(key)
	    
		bucket.add(new Pair<K, V>(key, value))
		
		return this
	}
	
	getPair(K key) -> Pair<K, V>
	{
	    return getBucket(key).filter(x -> x != 0 && x != null && x.key.equals(key)).first
	}
	
	public get(K key) -> V
	{
	    var pair = getPair(key)
	    
	    if (pair != null)
	    {
	        return pair.value
	    }
	    
	    return null
	}
	
	public remove(K key) -> V
	{
		Pair<K, V>[] bucket = getBucket(key)
		
		Int i = 0
		
		for (pair in bucket)
		{
		    if (pair.key.equals(key))
		    {
		        bucket.remove(i)
		        
		        return pair.value
		    }
		    
		    i++
		}
		
		return null
	}
	
	public containsKey(K key) -> Bool
	{
		return getPair(key) != null
	}
}