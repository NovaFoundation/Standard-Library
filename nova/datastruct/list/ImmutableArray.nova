package "nova/datastruct/list"

import "nova/primitive/number/Integer"

//[Mutable "Array"]
immutable class ImmutableArray<E> implements List<E> {
    E[] array
    
    visible Int count => array.count
    
    visible Bool empty => array.empty
    
    [Override] visible ImmutableArrayIterator<E> iterator => new ImmutableArrayIterator(this)
    
    [Override] public E first => array.first
    [Override] public E last => array.last
    
    this[Int index] => array[index]
    
    public construct(E[] array) => this(array, true)
    public construct(native E[] array, Int count) => this(new Array<E>(array, count), false)
    
    construct(E[] array, Bool clone) => this.array = clone ? array.clone() : array
    
    public indexOf(E element) => array.indexOf(element)
    
    [Override] public toArray() => array.clone()
    [Override] public map<Out>(mapFunc(E, Int, Array<E>) -> Out) => new ImmutableArray(array.map(mapFunc), false)
    [Override] public forEach(func(E, Int, Array<E>)) => array.forEach(func)
    [Override] public filter(filterFunc(E, Int, Array<E>) -> Bool) => ImmutableArray(array.filter(filterFunc), false)
    [Override] public take(Int howMany) => new ImmutableArray(array.take(howMany), false)
    [Override] public skip(Int howMany) => new ImmutableArray(array.skip(howMany), false)
    [Override] public reverse() => new ImmutableArray(array.reverse(), false)
    [Override] public toString() => "ImmutableArray [#{join(", ")}]"
    
    public toMutable() => array.clone()
}