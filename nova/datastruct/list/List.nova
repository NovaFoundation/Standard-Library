package "nova/datastruct/list"

import "nova/operators/EqualsOperator"

[AutoFinal]
trait List<Type> implements Iterable<Type> {
    visible var Int count
    
    visible Iterator<Type> iterator
    
    visible Type first
    visible Type last
    
    public toArray() -> Type[] {
        let array = new Type[]
        
        for (value in this) {
            array.add(value)
        }
        
        return array
    }
    
    public contains(Type value) => any(x => {
        value.class.isOfType(EqualsOperator) && x.class.isOfType(EqualsOperator) ? ((EqualsOperator)x).equals((EqualsOperator)value) : x == value
    })
    
    // [RequireGenericType Type implements EqualsOperator]
    // public contains(EqualsOperator value) => any({ ((EqualsOperator)_) == value })
    
    public forEach(func(Type, Int, List<Type>)) => this {
        var Int i = 0
        
        for (value in this) {
            func(value, i++, this)
        }
    }
    
    public map<Out>(mapFunc(Type, Int, List<Type>) -> Out) -> List<Out> {
        let array = new Out[count]
        
        var Int i = 0
        
        for (element in this) {
            array.add(mapFunc(element, i++, this))
        }
        
        return array
    }
    
    public any(anyFunc(Type) -> Bool) -> Bool => false {
        for (element in this) {
            if (anyFunc(element)) {
                return true
            }
        }
    }
    
    public all(allFunc(Type, Int, List<Type>) -> Bool, Bool stopOnContradiction = true) -> Bool {
        var Int i = 0
        var contradiction = false
        
        for (element in this) {
            if (!allFunc(element, i++, this)) {
                if (stopOnContradiction) return false
                
                contradiction = true
            }
        }
        
        return !contradiction
    }
    
    public filter(filterFunc(Type, Int, List<Type>) -> Bool) -> List<Type> {
        let list = new Type[]
        
        var Int i = 0
        
        for (value in this) {
            if (filterFunc(value, i++, this)) {
                list.add(value)
            }
        }
        
        return list
    }
    
    public filterNull() => filter({ _ != null })
    
    [RequireGenericType Type extends String]
    public pure filterEmpty() -> List<String> {
        let list = new String[]
        
        var Int i = 0
        
        for (value in this) {
            if (value && ((String)value).count > 0) {
                list.add(value)
            }
        }
        
        return list
    }
    
    public pure take(Int howMany) -> List<Type> {
        let list = new Type[]
        
        var Int i = 0
        
        for (value in this) {
            if (i++ >= howMany) {
                return list
            }
            
            list.add(value)
        }
        
        return list
    }
    
    public pure takeLast(Int howMany) -> Type[] {
        let list = new Type[]
        let startIndex = Math.max(0, count - howMany)
        
        if (startIndex == count) {
            return list
        }
        
        var Int i = 0
                
        for (value in this) {
            if (i++ >= startIndex) {
                list.add(value)
            }
        }
        
        return list
    }
    
    public pure skip(Int howMany) -> List<Type> {
        Type[] list = new Array()
        
        var Int i = 0
        
        for (value in this) {
            if (i++ >= howMany) {
                list.add(value)
            }
        }
        
        return list
    }
    
    public firstOr(Type default, func(Type) -> Bool = {true}) -> Type => default {
        for (element in this) {
            if (func(element)) {
                return element
            }
        }
    }
    
    public firstOrThrow(Exception e, func(Type) -> Bool = {true}) -> Type {
        for (element in this) {
            if (func(element)) {
                return element
            }
        }
        
        throw e
    }
    
    public firstWhere(func(Type) -> Bool) -> Type => null {
        for (element in this) {
            if (func(element)) {
                return element
            }
        }
    }
    
    public firstNonNull<Out>(func(Type) -> Out) -> Out => null {
        for (element in this) {
            Out value = func(element)
            
            if (value) {
                return value
            }
        }
    }
    
    public zip<OtherType, Out>(List<OtherType> other, zipper(Type, OtherType) -> Out) -> Out[] {
        let i1 = iterator
        let i2 = other.iterator
        
        let array = new Out[]
        
        while (i1.hasNext && i2.hasNext) {
            array.add(zipper(i1.next, i2.next))
        }
        
        return array
    }
    
    //get(Int index) -> Type
    //set(Int index, Type value) -> List<Type>
    //add(Type value) -> List<Type>
    //remove(Type value) -> List<Type>
    //clone() -> List<Type>
    public reverse() -> List<Type>
    
    public reduce<Out>(func(Out, Type, Int, List) -> Out, Out initialValue) -> Out {
        var Out value = initialValue
        var Int i = 0
        
        for (element in this) {
            value = func(value, element, i++, this)
        }
        
        return value
    }
    
    public join(String delimiter = "") =>
        reduce((str, e, i) => str + (i > 0 ? delimiter : "") + e, "")
        //reduce({ _value + (_index > 0 ? delimiter : "") + _element })
    
    public stitch(String delimiter = "") =>
        reduce((str, e) => str + delimiter + e, "")
    
    public toEnglish(String conjunction, Bool oxford = true) =>
        count > 1 ?
            take(count - 1).join(", ") + (oxford && count > 2 ? ", " : " ") + "#conjunction " + skip(count - 1).first :
            "#first"
}