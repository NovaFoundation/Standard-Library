package "nova/datastruct/list"

[AutoFinal]
immutable class ImmutableCharArray implements List<Char> {
    CharArray array
    
    visible pure Int count => array.count
    
    visible pure Bool empty => array.empty
    
    visible Int indexSize => array.indexSize
    
    [Override] visible pure ImmutableCharArrayIterator iterator => new ImmutableCharArrayIterator(this, indexSize)
    
    [Override] public pure Char first <=> array.first
    [Override] public pure Char last <=> array.last
    
    pure this[Int index] => array[index]
    
    public construct(CharArray array) => this(array, true)
    public construct(native Char[] array, Int count) => this(new CharArray(array, count), false)
    
    construct(CharArray array, Bool clone) => this.array = clone ? array.clone() : array
    
    [Override] public map<Out>(mapFunc(E, Int, CharArray) -> Out) => new ImmutableArray(array.map(mapFunc))
    [Override] public forEach(func(E, Int, CharArray)) => array.forEach(func)
    [Override] public filter(filterFunc(E, Int, CharArray) -> Bool) => new ImmutableCharArray(array.filter(filterFunc), false)
    [Override] public pure toArray() => array.clone()
    [Override] public pure take(Int howMany) => new ImmutableCharArray(array.take(howMany), false)
    [Override] public pure skip(Int howMany) => new ImmutableCharArray(array.skip(howMany), false)
    [Override] public pure reverse() => new ImmutableCharArray(array.reverse(), false)
    [Override] public pure toString() => "ImmutableCharArray [#{join(", ")}]"
    
    public toMutable() => array.clone()
}