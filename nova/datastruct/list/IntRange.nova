package "nova/datastruct/list"

class IntRange implements List<Int> {
    visible Int size => end - start
    
    public Int start, end
    
    [Override]
    visible IntRangeIterator iterator => new IntRangeIterator(this)
    
    Int first <=> start
    Int last => end - 1 {
        set {
            end = value + 1
        }
    }
    
    public construct() => this(0, 0)
    public construct(Int start, Int end) {
        this.start = start
        this.end = end
    }
    
    [Override]
    public contains(Int value) => value >= start && value < end
    
    public toArray() -> Int[] {
        Int[] ints = new IntArray(size)
        
        Int i = start
        
        while (i < end) {
            ints.set(i - start, i++)
        }
        
        return ints
    }
    
    public forEach(func(Int, Int, IntRange)) {
        Int i = 0
        
        for (value in this) {
            func(value, i++, this)
        }
    }
    
    public map<Out>(mapFunc(Int, Int, IntRange) -> Out) -> Out[] {
        Out[] array = new Array()
        
        Int i = 0

        for (element in this) {
            array.add(mapFunc(element, i++, this))
        }
        
        return array
    }
    
    public any(anyFunc(Int) -> Bool) -> Bool {
        for (element in this) {
            if (anyFunc(element)) {
                return true
            }
        }
        
        return false
    }
    
    public all(allFunc(Int) -> Bool) -> Bool {
        for (element in this) {
            if (!allFunc(element)) {
                return false
            }
        }
        
        return true
    }
    
    public filter(filterFunc(Int, Int, IntRange) -> Bool) -> IntArray {
        IntArray list = new IntArray()
        
        Int i = 0
        
        for (value in this) {
            if (filterFunc(value, i++, this)) {
                list.add(value)
            }
        }
        
        return list
    }
    
    public take(Int howMany) -> IntRange {
        return new IntRange(start, (Int)Math.min(start + howMany, end))
    }
    
    public skip(Int howMany) -> IntRange {
        return new IntRange((Int)Math.min(start + howMany, end), end)
    }
    
    public firstWhere(func(Int) -> Bool) -> Int {
        for (element in this) {
            if (func(element)) {
                return element
            }
        }
        
        return null
    }
    
    //get(Int index) -> Int
    //set(Int index, Int value) -> IntRange
    //add(Int value) -> IntRange
    //remove(Int value) -> IntRange
    //clone() -> IntRange
    
    public reverse() -> IntRange {
        return new IntRange(end, start)
    }
    
    public join(String delimiter) -> String {
        String str = ""
        
        Bool passed = false
        
        for (element in this) {
            if (passed) {
                str = str + delimiter
            } else {
                passed = true
            }
            
            str = str + element.toString()
        }
        
        return str
    }
    
    public toString() -> String {
        return "#{start}..#{end}"
    }
}