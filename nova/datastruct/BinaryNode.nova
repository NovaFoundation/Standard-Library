package "nova/datastruct"

[AutoFinal]
class BinaryNode<E extends Comparable> extends Node<E> {
    /**
     * The left child of the BinaryNode instance.
     */
    public var BinaryNode<E> left <=> this[0]
    
    /**
     * The right child of the BinaryNode instance.
     */
    public var BinaryNode<E> right <=> this[1]
    
    public construct(E data = null) => this(data, 2)
    
    construct(E data, Int size) => super(data, size)
    
    getNode(Int index) -> BinaryNode {
        if (children.count <= index) return null
        
        return (BinaryNode)children[index]
    }
    
    setNode(Int index, BinaryNode<E> data) {
        if (children.count <= index)
            children.add(index, data)
        else
            children[index] = data
    }
    
    public addChild(E data) {
        if (this.data.compareTo(data) >= 0) {
            if (left)
                left.addChild(data)
            else
                left = new BinaryNode(data)
        } else {
            if (right)
                right.addChild(data)
            else
                right = new BinaryNode(data)
        }
    }
}