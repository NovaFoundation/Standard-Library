package "nova/datastruct"

import "nova/datastruct/list/List"

public class HashSet<T> implements List<T>
{
	T[][] buckets

	Int bucketSize

	visible Int size

	public construct()
	{
	    this(5, 5)
	}

	public construct(Int bucketCount, Int bucketSize)
	{
		buckets = new Array(bucketCount).map({ new Array<T>(bucketSize) })

		this.bucketSize = bucketSize
	}

	[Override]
	public toArray() -> T[]
	{
	    return map({ _ })
	}

	[Override]
	public any(func(T) -> Bool) -> Bool
	{
        for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    if (func(v))
                    {
                        return true
                    }
                }
            }
        }

	    return false
	}

	[Override]
	public all(func(T) -> Bool) -> Bool
	{
        for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    if (!func(v))
                    {
                        return false
                    }
                }
            }
        }

	    return true
	}

	[Override]
	public map<Out>(func(T, Int, HashSet<T>) -> Out) -> Out[]
	{
	    Out[] array = new Array()
        
	    Int i = 0
        
        for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    array.add(func(v, i++, this))
                }
            }
        }
        
        return array
	}

	[Override]
	public filter(func(T, Int, HashSet<T>) -> Bool) -> T[]
	{
	    T[] array = new Array()
        
	    Int i = 0
        
        for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    if (func(v, i++, this))
                    {
                        array.add(v)
                    }
                }
            }
        }

        return array
	}

	[Override]
	public join(String delimiter) -> String
	{
	    Int i = 0

	    String output = ""

	    for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    if (i > 0)
                    {
                        output = output + delimiter
                    }

                    output = output + v
                }
            }
        }

        return output
	}

	[Override]
	public skip(Int num) -> T
	{
	    return map({ _ }).skip(num)
	}

	[Override]
	public take(Int num) -> T
	{
	    return map({ _ }).take(num)
	}

	[Override]
	public reverse() -> T[]
	{
	    return map({ _ }).reverse()
	}

	[Override]
	public firstWhere(func(T) -> Bool) -> T
	{
	    for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    if (func(v))
                    {
                        return v
                    }
                }
            }
        }

        return null
	}

	[Override]
	public forEach(func(T, Int, HashSet<T>))
	{
	    //HashSet<T> self = this

	    /*buckets.forEach(
	    {
	        _.forEach(pair ->
	        {
                if (v != null)
                {
                    func(v, i++, self)
                }
            })
        })*/

	    Int i = 0

        for (bucket in buckets)
        {
            for (v in bucket)
            {
                if (v != null)
                {
                    func(v, i++, this)
                }
            }
        }
	}

	getBucket(T value) -> T[]
	{
	    //return buckets.get((Int)(value.hashCodeLong % buckets.count))
	    return buckets.get((Int)(value.hashCodeLong & (buckets.count - 1)))
	}

	public add(T value) -> HashSet
	{
	    getBucket(value).add(value)
        
		return this
	}
    
	public get(T value) -> T
	{
	    //return getBucket(value).filter(x -> x != 0 && x != null && x.equals(value)).first
	    
	    for (v in getBucket(value))
	    {
	        if (v.equals(value))
	        {
	            return v
	        }
	    }
	    
	    return null
	}
    
	public remove(T value) -> T
	{
		T[] bucket = getBucket(value)
        
		Int i = 0
        
		for (v in bucket)
		{
		    if (v.equals(value))
		    {
		        bucket.remove(i)
                
		        return v
		    }
            
		    i++
		}
        
		return null
	}
    
    [Override]
	public contains(T value) -> Bool
	{
		return get(value) != null
	}
	
	public toString() -> String
	{
	    return "HashSet [#{join(", ")}]"
	}
}