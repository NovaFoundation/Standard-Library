package "nova/thread"

import "nova/thread/NativeThread.h"

class Thread {
    external type NOVA_THREAD_HANDLE
    
    external void lib_nova_thread_sleep(long millis)
    external void lib_nova_thread_join(NOVA_THREAD_HANDLE handle)
    external void lib_nova_thread_cancel(NOVA_THREAD_HANDLE handle)
    external NOVA_THREAD_HANDLE* create_thread(Thread thread, run())
    
    NOVA_THREAD_HANDLE* handle
    
    visible static immutable Thread[] ACTIVE_THREADS = new Thread[]
    
    visible Bool active
    
    let action()
    
    Bool useAction = false
    
    public construct() {}
    
    public construct(action()) {
        this.action = action
        
        useAction = true
    }
    
    visible static Long id {
        get {
            external c {
                return nova_current_thread_id();
            }
        }
        
        no set
    }
    
    public start() => handle = create_thread(this, startRun)
    public join() => lib_nova_thread_join(handle)
    public kill() => lib_nova_thread_cancel(handle)
    
    public static sleep(Long millis) {
        [Target c]
        lib_nova_thread_sleep(millis)
        
        external js {
            console.warn("No sleep available in JS");
        }
    }
    
    public static lock() {
        external c {
            #ifdef _WIN32
                WaitForSingleObject(nova_thread_semaphore, INFINITE);
            #else
                sem_wait(nova_thread_semaphore);
            #endif
        }
    }
    
    public static unlock() {
        external c {
            #ifdef _WIN32
                ReleaseSemaphore(nova_thread_semaphore, 1, 0);
            #else
                sem_post(nova_thread_semaphore);
            #endif
        }
    }
    
    public static sync(action()) {
        lock()
        action()
        unlock()
    }
    
    public run() {}
    
    startRun() {
        active = true
        
        sync({ ACTIVE_THREADS = ACTIVE_THREADS.add(this) })
        
        try {
            //GC.init()
            
            if (useAction) {
                action()
            } else {
                run()
            }
        } catch (Exception e) {
            Console.writeLine("An error has occurred...")
        }
        
        active = false
        
        sync({ ACTIVE_THREADS = ACTIVE_THREADS.remove(this) })
    }
}