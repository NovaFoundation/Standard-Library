package "nova/time"

import "nova/datastruct/Comparable"
import "nova/regex/Regex"

class DateTime implements Comparable<DateTime> {
    public Long millis
    
    public Int year, month, dayOfMonth
    
    visible Bool isLeapYear => isLeapYear(year)
    
    visible static final /*immutable*/ Byte[] MONTH_DAYS = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    public construct(String input, String format = null) {
        if (format == null) {
            throw new Exception("implicit formats not implemented yet")
        }
        
        Regex.getMatches("yyyy", format).forEach(match => {
            year = Int.parseInt(input.substring(match.start, match.end))
        })
        Regex.getMatches("MM", format).forEach(match => {
            month = Int.parseInt(input.substring(match.start, match.end))
        })
        Regex.getMatches("dd", format).forEach(match => {
            dayOfMonth = Int.parseInt(input.substring(match.start, match.end))
        })
        
        this(year, month, dayOfMonth)
    }
    
    public construct(this Int year = 0, this Int month = 1, this Int dayOfMonth = 1) {
        this.year = year
        
        if (month <= 0 || month > 12) {
            throw new InvalidDateException("Invalid month #{month}. Must be 1-12")
        } else if (!isValidDayOfMonth(month, dayOfMonth)) {
            throw new InvalidDateException("Invalid day of month #dayOfMonth for month #month")
        } else if (dayOfMonth == 29 && !isLeapYear) {
            throw new InvalidDateException("Year #year is not a leap year")
        }
        
        millis += (Long)year * 365 * 24 * 60 * 60
        millis += (Long)month * 30 * 24 * 60 * 60
        millis += (Long)dayOfMonth * 24 * 60 * 60
    }
    
    static isLeapYear(Int year) =>
        (year & 3) == 0 &&
        ((year % 25) != 0 || (year & 15) == 0)
        // year % 4 == 0 &&
        // (year % 400 == 0 || year % 100 != 0)
    
    public compareTo(DateTime other) => (Int)(millis - other.millis)
    
    public toString(String format) -> String {
        let monthString = (month < 10 ? "0" : "") + month
        let dayOfMonthString = (dayOfMonth < 10 ? "0" : "") + dayOfMonth
        
        return "#{year}-#{monthString}-#{dayOfMonthString}"
    }
}