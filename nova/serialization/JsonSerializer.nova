package "nova/serialization"

import "nova/datastruct/HashMap"
import "nova/io/File"
import "nova/io/FileReader"

import "nova/serialization/SyntaxStringFunctions"

class JsonSerializer {
    public serialize(Object object) {
        
    }
    
    public parse(File file) => parse(new FileReader(file).readAllContents())
    
    public parse(String json) -> Object {
        if (isObject(json)) {
            return parseObject(json)
        } else if (isArray(json)) {
            return parseArray(json)
        } else {
            throw new InvalidParseException()
        }
    }
    
    parseValue(String value) -> Object {
        if (isObject(value)) {
            return parseObject(value)
        } else if (isArray(value)) {
            return parseArray(value)
        } else if (isString(value)) {
            return value.trimEnds(1)
        } else {
            return value
        }
    }
    
    public parseArray(String json) -> Object[] => null {
        let trimmed = json.trim()
        
        if (trimmed.first != '[') {
            throw new InvalidParseException("Not a JSON array")
        } else if (trimmed.last != ']') {
            throw new MissingMatchingTokenException(']')
        }
        
        let contents = trimmed.trimEnds(1, true)
        let values = contents.splitAtCommas(allowTrailing: true)
        
        return values.map({ parseValue(_) })
    }
    
    public isObject(String json) => (let trimmed = json.trim()).first == '{' && trimmed.findEndingMatch(0, '{', '}') == trimmed.count - 1
    public isArray(String json) => (let trimmed = json.trim()).first == '[' && trimmed.findEndingMatch(0, '[', ']') == trimmed.count - 1
    public isSingleQuoteString(String json) => (let trimmed = json.trim()).first == '\'' && trimmed.findEndingSingleQuote(0) == trimmed.count - 1
    public isDoubleQuoteString(String json) => (let trimmed = json.trim()).first == '"' && trimmed.findEndingQuote(0) == trimmed.count - 1
    public isString(String json) => isSingleQuoteString(json) || isDoubleQuoteString(json)
    
    public parseObject(String json) => parseObject(json, new HashMap(5,5))
    public parseObject(String json, var HashMap<String, Object> map) => map {
        let trimmed = json.trim()
        
        if (trimmed.first != '{') {
            throw new InvalidParseException("Not a JSON object")
        } else if (trimmed.last != '}') {
            throw new MissingMatchingTokenException('}')
        }
        
        let contents = trimmed.trimEnds(1, true)
        let properties = contents.splitAtCommas(allowTrailing: true)
        
        properties.forEach(prop => {
            let colonIndex = prop.findCharOnTopLevel(':')
            let split = [prop.substring(0, colonIndex).trim(), prop.substring(colonIndex + 1).trim()]
            
            if (isString(split.first)) {
                split[0] = split.first.trimEnds(1)
            }
            
            map[split.first] = parseValue(split.last)
        })
    }
    
    class InvalidParseException extends Exception {
        public construct(String message = "Invalid parse") => super(message)
    }
    
    class MissingMatchingTokenException extends InvalidParseException {
        public construct(Char token) => super("Missing matching '#token' token")
    }
}