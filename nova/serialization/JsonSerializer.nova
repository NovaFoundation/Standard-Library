package "nova/serialization"

import "SyntaxStringFunctions"

class JsonSerializer {
    public serialize(Object object) {
        
    }
    
    public parse(File file) {
        return parse
    }
    
    public parse(String json) -> Object {
        
    }
    
    public parseArray(String json) -> Object[] {
        
    }
    
    public isObject(String json) => (let trimmed = json.trim()).first == '{' && trimmed.findEndingMatch(0, '{', '}') == trimmed.count - 1
    public isArray(String json) => (let trimmed = json.trim()).first == '[' && trimmed.findEndingMatch(0, '[', ']') == trimmed.count - 1
    public isSingleQuoteString(String json) => (let trimmed = json.trim()).first == '\'' && trimmed.findEndingSingleQuote(0) == trimmed.count - 1
    public isDoubleQuoteString(String json) => (let trimmed = json.trim()).first == '"' && trimmed.findEndingQuote(0) == trimmed.count - 1
    public isString(String json) => isSingleQuoteString(json) || isDoubleQuoteString(json)
    
    public parseObject(String json) -> HashMap<String, Object> {
        let trimmed = json.trim()
        
        if (trimmed.first != '{') {
            throw new InvalidParseException("Not a JSON object")
        } else if (trimmed.last != '}') {
            throw new MissingMatchingTokenException('}')
        }
        
        let contents = trimmed.trimEnds(1, true)
        
        let properties = contents.splitAtCommas(allowTrailing: true)
        
        
    }
    
    class InvalidParseException extends Exception {}
    
    class MissingMatchingTokenException extends InvalidParseException {
        public construct(Char token) {
            super("Missing matching '#token' token")
        }
    }
}