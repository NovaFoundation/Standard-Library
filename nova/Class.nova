package "nova"

import "nova/datastruct/list/ImmutableArray"
import "nova/meta/Field"

class Class {
    visible Class extension
    visible ImmutableArray<Class> interfaces
    
    visible ImmutableArray<Field> fields = new Field[0].toImmutable()
    
    visible Bool isInterface
    
    visible String location
    visible String package => location.substring(0, location.lastIndexOf("/", defaultReturnValue: 0))
    visible String name => location.substring(location.lastIndexOf("/") + 1)
    
    visible static ImmutableArray<Class> ALL
    
    public construct(String location, Bool isInterface) {
        this.location = location
        this.isInterface = isInterface
    }
    
    public isOfType(Class other) =>
        other.isInterface ?
            isOfTypeInterface(other) :
            isOfTypeClass(other)
    
    isOfTypeClass(Class other) -> Bool {
        var current = this
        
        while (current != null) {
            if (current == other) {
                return true
            }
            
            current = current.extension
        }
        
        return false
    }
    
    isOfTypeInterface(Class other) -> Bool {
        var current = this
        
        while (current != null) {
            if (current.interfaces.any({ _ == other })) {
                return true
            }
            
            current = current.extension
        }
        
        return false
    }
    
    public toString() => "Class \"#location\""
}